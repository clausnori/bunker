import telebot
import random
import time
import traceback
import threading
import json
import os
from config import TOKEN
import requests
from telebot import types
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from card_table import CardTable

# Bot Configuration
bot = telebot.TeleBot(TOKEN)

Table = CardTable(
        card_path_dir="cards",               # –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∫–∞—Ä—Ç
        background_path="cards/fon.png",      # –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ñ–æ–Ω–∞
        card_size=(300, 350),
        spacing=10,
        margin= 100
    )


# –ü—É—Ç—å –∫ —Ñ–æ–Ω–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (RIP —à–∞–±–ª–æ–Ω –±–µ–∑ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ)
BACKGROUND_PATH = 'test.png'  # –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –±–µ–∑ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_avatar(user_id):
    photos = bot.get_user_profile_photos(user_id)
    if photos.total_count > 0:
        file_id = photos.photos[0][0].file_id
        file_info = bot.get_file(file_id)
        file = requests.get(f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}')
        return Image.open(BytesIO(file.content))
    return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /dead
def send_rip_image(chat_id,user_id):
    user_avatar = get_user_avatar(user_id)
    if user_avatar is None:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω –∏ –∞–≤–∞—Ç–∞—Ä–∫—É
    background = Image.open(BACKGROUND_PATH).convert("RGBA")
    avatar = user_avatar.resize((120, 120)).convert("RGBA")

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å—Ç–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–∞–º—è—Ç–Ω–∏–∫–∞)
    position = (250, 70)  # –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ–¥ —Ñ–∞–π–ª tombstone.png

    # –í—Å—Ç–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
    background.paste(avatar, position, avatar)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    output = BytesIO()
    output.name = 'rip_result.png'
    background.save(output, 'PNG')
    output.seek(0)
    bot.send_photo(chat_id, output)

# Constants
REGISTRATION_TIME = 30  # Registration time in seconds
DECK = ['A'] * 6 + ['K'] * 6 + ['Q'] * 6 + ['J'] * 2  # 6 Aces, 6 Kings, 6 Queens, 2 Jokers
CARD_NAMES = {
    'A': 'Ace', 
    'K': 'King', 
    'Q': 'Qwen', 
    'J': 'JokerüÉè'
}
SAVE_FILE = 'liars_deck_state.json'

# Game state
class GameState:
    def __init__(self):
        self.games = {}  # Active games by chat_id
        self.waiting_registration = {}  # Registration tracking
        self.registration_messages = {}  # Registration messages for updates
        self.registration_timers = {}  # Timers for registration countdown
        
        # Load saved state if exists
        self.load_state()
    
    def save_state(self):
        """Save current game state to file"""
        try:
            with open(SAVE_FILE, 'w', encoding='utf-8') as f:
                state = {
                    'games': {
                        chat_id: {
                            'players': game['players'],
                            'current_player': game['current_player'],
                            'table_cards': game['table_cards'],
                            'current_card': game['current_card'],
                            'status': game['status'],
                            'last_claim': game['last_claim'],
                            'roulette_bullets': game['roulette_bullets']
                        } for chat_id, game in self.games.items()
                    }
                }
                json.dump(state, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"Error saving state: {e}")

    def load_state(self):
        """Load game state from file"""
        if os.path.exists(SAVE_FILE):
            try:
                with open(SAVE_FILE, 'r', encoding='utf-8') as f:
                    state = json.load(f)
                    self.games = state.get('games', {})
            except Exception as e:
                print(f"Error loading state: {e}")
    
    def init_new_game(self, chat_id):
        """Initialize a new game"""
        self.games[chat_id] = {
            'players': {},
            'current_player': None,
            'table_cards': [],
            'current_card': None,
            'status': 'registration',
            'last_claim': {'player_id': None, 'card': None, 'count': 0},
            'roulette_bullets': {}
        }
        
        # Set up registration expiry
        self.waiting_registration[chat_id] = time.time() + REGISTRATION_TIME
        
        # Cancel previous timer if exists
        if chat_id in self.registration_timers:
            self.registration_timers[chat_id].cancel()
        
        # Start new timer
        self.registration_timers[chat_id] = threading.Timer(
            REGISTRATION_TIME, 
            end_registration, 
            args=[chat_id, self]
        )
        self.registration_timers[chat_id].start()
        
        return self.games[chat_id]
    
    def get_game(self, chat_id):
        """Get game data for a chat"""
        return self.games.get(chat_id)
    
    def is_player_in_any_game(self, user_id):
        """Check if a player is in any active game"""
        for chat_id, game_data in self.games.items():
            if user_id in game_data['players']:
                return chat_id, game_data
        return None, None
    
    def get_registered_players_text(self, chat_id):
        """Get formatted list of registered players"""
        game = self.games.get(chat_id)
        if not game:
            return ""
            
        return "\n".join([f"‚Ä¢ {player_info['name']}" for 
                       player_id, player_info in game['players'].items()])
    
    def extend_registration(self, chat_id):
        """Extend registration time"""
        if chat_id not in self.waiting_registration:
            return False
            
        self.waiting_registration[chat_id] = time.time() + REGISTRATION_TIME
        
        # Reset timer
        if chat_id in self.registration_timers:
            self.registration_timers[chat_id].cancel()
        
        self.registration_timers[chat_id] = threading.Timer(
            REGISTRATION_TIME, 
            end_registration, 
            args=[chat_id, self]
        )
        self.registration_timers[chat_id].start()
        
        return True
    
    def register_player(self, chat_id, user_id, user_name):
        """Register a player to a game"""
        if chat_id not in self.games or self.games[chat_id]['status'] != 'registration':
            return False, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∏–≥—Ä—É."
        
        # Check if already registered
        if user_id in self.games[chat_id]['players']:
            return False, f"@{user_name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏–≥—Ä–µ."
        
        # Register player
        self.games[chat_id]['players'][user_id] = {
            'name': user_name,
            'cards': [],
            'bullets': 0
        }
        
        return True, f"@{user_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."

# Initialize game state
game_state = GameState()
# Helper functions
def get_next_player(chat_id, current_player_id):
    """Get next player in turn order"""
    game_data = game_state.games[chat_id]
    player_ids = list(game_data['players'].keys())
    
    if len(player_ids) == 1:
        return current_player_id
    
    current_index = player_ids.index(current_player_id)
    next_index = (current_index + 1) % len(player_ids)
    return player_ids[next_index]

def end_registration(chat_id, state):
    """End registration phase and start game if enough players"""
    # Check if registration still exists
    if chat_id not in state.waiting_registration:
        return
        
    try:
        # Clean up registration data
        del state.waiting_registration[chat_id]
        if chat_id in state.registration_messages:
            del state.registration_messages[chat_id]
        
        # Start game if enough players
        if chat_id in state.games and len(state.games[chat_id]['players']) >= 2:
            start_game(chat_id)
        else:
            bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã (–º–∏–Ω–∏–º—É–º 2). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            if chat_id in state.games:
                del state.games[chat_id]
    except Exception as e:
        print(f"Error ending registration: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        if chat_id in state.games:
            del state.games[chat_id]

def start_game(chat_id):
    """Start the game after registration is complete"""
    game_data = game_state.games[chat_id]
    
    # Update game status
    game_data['status'] = 'playing'
    
    # Shuffle and deal cards
    deck = DECK.copy()
    random.shuffle(deck)
    
    player_ids = list(game_data['players'].keys())
    for player_id in player_ids:
        game_data['players'][player_id]['cards'] = deck[:5]
        deck = deck[5:]
        
        # Send private message with cards
        try:
            player_cards = game_data['players'][player_id]['cards']
            card_names = [CARD_NAMES[card] for card in player_cards]
            bot.send_message(player_id, 
                          f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(card_names)} ({', '.join(player_cards)})")
        except Exception as e:
            bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É @{game_data['players'][player_id]['name']}.")
    
    # Select random starting player and card
    game_data['current_player'] = random.choice(player_ids)
    game_data['current_card'] = random.choice(['A', 'K', 'Q'])
    
    # Send game start message
    try:
        with open('main.png', 'rb') as photo:
            bot.send_photo(chat_id, photo,
                        f"–ò–≥—Ä–∞ '–ë–∞—Ä –õ–∂–µ—Ü–æ–≤' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n"
                        f"–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç: @{game_data['players'][game_data['current_player']]['name']}")
    except Exception:
        # Send text-only message if photo not available
        bot.send_message(chat_id,
                       f"–ò–≥—Ä–∞ '–ë–∞—Ä –õ–∂–µ—Ü–æ–≤' –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n"
                       f"–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç: @{game_data['players'][game_data['current_player']]['name']}")
    
    bot.send_message(chat_id, f"–û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: {CARD_NAMES[game_data['current_card']]}")
    
    # Initialize empty table and send first turn message
    game_data['table_cards'] = []
    send_turn_message(chat_id)
    
    # Save game state
    game_state.save_state()
    
def send_turn_message(chat_id):
    """Send message to current player for their turn"""
    game_data = game_state.games[chat_id]
    current_player_id = game_data['current_player']
    player_name = game_data['players'][current_player_id]['name']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∫–∞—Ä—Ç—ã, –∏ –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
    if len(game_data['players'][current_player_id]['cards']) == 0:
        deal_cards_to_player(chat_id, current_player_id)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ–ª-–≤–∞ –∫–∞—Ä—Ç
    markup = types.InlineKeyboardMarkup(row_width=3)
    cards_on_hand = len(game_data['players'][current_player_id]['cards'])
    
    # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ö–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    if cards_on_hand == 0:
        bot.send_message(chat_id, f"@{player_name} –Ω–µ –∏–º–µ–µ—Ç –∫–∞—Ä—Ç. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É.")
        game_data['current_player'] = get_next_player(chat_id, current_player_id)
        send_turn_message(chat_id)
        return
    
    # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö–æ–¥
    for i in range(1, min(cards_on_hand + 1, 4)):
        markup.add(types.InlineKeyboardButton(text=f"{i}", callback_data=f"place_{i}"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
    player_cards = game_data['players'][current_player_id]['cards']
    card_names = " ".join(player_cards)
    text = (f"–í–∞—à —Ö–æ–¥!\n–°—Ç–æ–ª: {CARD_NAMES[game_data['current_card']]} ({game_data['current_card']})\n"
           f"–ö–∞—Ä—Ç—ã: {card_names}\n–°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –ø–æ–ª–æ–∂–∏—Ç–µ?")
    try:
        bot.send_message(current_player_id, text, reply_markup=markup)
    except Exception:
        bot.send_message(chat_id, f"@{player_name}, –æ—Ç–∫—Ä–æ–π –õ–° —Å –±–æ—Ç–æ–º.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    bot.send_message(chat_id, f"–•–æ–¥: @{player_name} | –°—Ç–æ–ª: {CARD_NAMES[game_data['current_card']]}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    game_data['last_activity'] = time.time()

def deal_cards_to_player(chat_id, player_id):
    """Deal new cards to a player who has none"""
    game_data = game_state.games[chat_id]
    player_name = game_data['players'][player_id]['name']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–∞—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 5)
    cards_to_deal = 5
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∏–Ω–∏-–∫–æ–ª–æ–¥—É, –∫–∞–∫ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    mini_deck = DECK.copy()
    random.shuffle(mini_deck)
    
    # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
    new_cards = mini_deck[:cards_to_deal]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É
    game_data['players'][player_id]['cards'] = new_cards
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É –æ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–∞—Ö
    try:
        card_names = [CARD_NAMES[card] for card in new_cards]
        bot.send_message(player_id, 
                      f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã: {', '.join(card_names)} ({', '.join(new_cards)})")
        bot.send_message(chat_id, f"@{player_name} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã.")
    except Exception as e:
        bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–∞—Ö –∏–≥—Ä–æ–∫—É @{player_name}.")
    
    game_state.save_state()

def check_claim(chat_id, checker_id):
    """Check the validity of the last claim"""
    game_data = game_state.games[chat_id]
    last_claim = game_data['last_claim']
    claimed = last_claim['player_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ
    if not game_data['table_cards']:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–∞ —Å—Ç–æ–ª–µ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
    if len(game_data['table_cards']) < last_claim['count']:
        bot.send_message(chat_id, 
                      f"–û—à–∏–±–∫–∞: –Ω–∞ —Å—Ç–æ–ª–µ {len(game_data['table_cards'])} –∫–∞—Ä—Ç, "
                      f"–∞ –∑–∞—è–≤–ª–µ–Ω–æ {last_claim['count']}. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É.")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    laid = game_data['table_cards'][-last_claim['count']:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –∫–∞—Ä—Ç—ã –∑–∞—è–≤–∫–µ (–î–∂–æ–∫–µ—Ä—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π)
    print(laid)
    match = all(c == last_claim['card'] or c == 'J' for c in laid)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
    loser_id = checker_id if match else claimed
    winner_id = claimed if match else checker_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if loser_id not in game_data['players'] or winner_id not in game_data['players']:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ.")
        return
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    status_msg = f"–≠—Ç–æ –ø—Ä–∞–≤–¥–∞, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ " if match else "–û–±–º–∞–Ω!!!"
    card_str = [CARD_NAMES[card] for card in laid]
    text= f"–•–º–º: {status_msg}\n –Ω–∞ —Å—Ç–æ–ª–µ: {card_str}"
    test_cart(chat_id,text,laid)
    

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—é –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É
    bullets = game_data['roulette_bullets'].get(loser_id, 0) + 1
    game_data['roulette_bullets'][loser_id] = bullets
    bot.send_message(chat_id, f"@{game_data['players'][loser_id]['name']} –≤ —Ä—É–ª–µ—Ç–∫–µ ‚Äî {bullets}/6")

    # –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
    bot.send_message(chat_id, "–©–µ–ª–∫.....")
    time.sleep(3)
    with open('rulet.gif', 'rb') as photo:
      bot.send_animation(chat_id, photo)
    time.sleep(4)
    
    if random.randint(1, 6) <= bullets:
        # –ò–≥—Ä–æ–∫ –≤—ã–±—ã–≤–∞–µ—Ç
        bot.send_message(chat_id, f"üí•–ë–∞—Ö! @{game_data['players'][loser_id]['name']} –¥—ã—Ä—è–≤–∏—Ç —Å–≤–æ—é –≥–æ–ª–æ–≤—É.")
        send_rip_image(chat_id,loser_id)
        del game_data['players'][loser_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å)
        if len(game_data['players']) == 1:
            last_player_id = list(game_data['players'].keys())[0]
            bot.send_message(chat_id, f"üéâüéâüéâ–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{game_data['players'][last_player_id]['name']}")
            game_data['status'] = 'finished'
            game_state.save_state()
            return
        elif len(game_data['players']) == 0:
            bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤.")
            game_data['status'] = 'finished'
            game_state.save_state()
            return
    else:
        bot.send_message(chat_id, f"–ù–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ –∂–∏–≤ ü§î!\n @{game_data['players'][loser_id]['name']} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä—É.")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    game_data['table_cards'] = []
    game_data['current_card'] = random.choice(['A', 'K', 'Q'])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω –≤—Å–µ –µ—â–µ –≤ –∏–≥—Ä–µ
    if winner_id in game_data['players']:
        game_data['current_player'] = winner_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç —É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if len(game_data['players'][winner_id]['cards']) == 0:
            deal_cards_to_player(chat_id, winner_id)
            
        send_turn_message(chat_id)
    else:
        # –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—ã–±—ã–ª, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        if game_data['players']:
            game_data['current_player'] = list(game_data['players'].keys())[0]
            send_turn_message(chat_id)
        else:
            bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤.")
            game_data['status'] = 'finished'
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    game_data['last_activity'] = time.time()
    game_state.save_state()

def process_card_selection(message, user_id, chat_id):
    """Process text-based card selection from player"""
    # Verify it's the right user
    if message.from_user.id != user_id:
        bot.register_next_step_handler_by_chat_id(message.chat.id, process_card_selection, user_id, chat_id)
        return

    # Check game state
    game_data = game_state.games.get(chat_id)
    if not game_data or game_data['current_player'] != user_id or game_data['status'] != 'playing':
        bot.send_message(message.chat.id, "–ù–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return



    # Parse input cards
    text = message.text.strip().upper()
    input_cards = text.split() if ' ' in text else list(text)

    # Verify card count
    if len(input_cards) != game_data['temp_count']:
        bot.send_message(message.chat.id, f"–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {game_data['temp_count']} –∫–∞—Ä—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler_by_chat_id(message.chat.id, process_card_selection, user_id, chat_id)
        return

    # Validate card symbols
    valid_cards = ["A", "K", "Q", "J"]
    if not all(card in valid_cards for card in input_cards):
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ: A, K, Q, J. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler_by_chat_id(message.chat.id, process_card_selection, user_id, chat_id)
        return

    # Check if player has these cards
    player_cards = game_data['players'][user_id]['cards']
    
    if not player_cards:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç!")
        return
        
    player_cards_copy = player_cards.copy()
    selected_cards = []

    for card in input_cards:
        if card in player_cards_copy:
            selected_cards.append(card)
            player_cards_copy.remove(card)
        else:
            cards_str = ' '.join(player_cards)
            bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã {card}. \n –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {cards_str}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler_by_chat_id(message.chat.id, process_card_selection, user_id, chat_id)
            return

    # Remove cards from player, add to table
    for card in selected_cards:
        game_data['players'][user_id]['cards'].remove(card)
        game_data['table_cards'].append(card)

    # Update last claim
    game_data['last_claim'] = {
        'player_id': user_id,
        'card': game_data['current_card'],
        'count': game_data['temp_count']
    }

    # Clean up temp data
    del game_data['temp_count']
    if 'temp_selected_cards' in game_data:
        del game_data['temp_selected_cards']

    # Send messages
    player_name = game_data['players'][user_id]['name']
    text = f"@{player_name} –ø–æ–ª–æ–∂–∏–ª {len(selected_cards)} –∫–∞—Ä—Ç—ã {CARD_NAMES[game_data['current_card']]}"
    test_cart(chat_id,text,create_back_list(selected_cards))

    try:
        bot.send_message(user_id, f"–í—ã –ø–æ–ª–æ–∂–∏–ª–∏: {' '.join(selected_cards)}")
    except Exception as e:
        print(f"Error sending card message: {e}")

    # Set up next player action
    next_player_id = get_next_player(chat_id, user_id)
    game_data['next_player'] = next_player_id
    next_name = game_data['players'][next_player_id]['name']

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(text="–õ–æ–∂—å", callback_data="check"),
        types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="pass")
    )

    bot.send_message(chat_id, f"@{next_name}, —Ö–æ–¥ –∑–∞ —Ç–æ–±–æ–π! –í–µ—Ä–∏—à—å –µ–º—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å?", reply_markup=markup)
    game_state.save_state()


def create_back_list(selected_cards):
    return ["back"] * len(selected_cards)

def get_next_player(chat_id, current_player_id):
    """Get next player in turn order"""
    game_data = game_state.games[chat_id]
    player_ids = list(game_data['players'].keys())
    
    if len(player_ids) <= 1:
        return current_player_id
    
    current_index = player_ids.index(current_player_id) if current_player_id in player_ids else 0
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫—Ä—É–≥—É, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
    for i in range(1, len(player_ids) + 1):
        next_index = (current_index + i) % len(player_ids)
        next_player_id = player_ids[next_index]
        # –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        return next_player_id
    
    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (—á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏), –≤–µ—Ä–Ω–µ–º —Ç–µ–∫—É—â–µ–≥–æ
    return current_player_id


def test_cart(chat_id,text,cards):
  img = Table.render_table(cards)
  output = BytesIO()
  output.name = 'table.png'
  img.save(output, 'PNG')
  output.seek(0)
  bot.send_photo(chat_id, output,text)
  

# Command handlers
@bot.message_handler(commands=['start'])
def start_command(message):
    """Handle /start command"""
    text = ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ö–ª—É–± –õ–∂–µ—Ü–æ–≤'!\n\n"
           "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_game")
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['new_game'])
def new_game_command(message):
    """Handle /new_game command to start registration"""
    chat_id = message.chat.id

    # Check if game is already in progress
    if chat_id in game_state.games and game_state.games[chat_id]['status'] != 'finished':
        bot.send_message(chat_id, "–í —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞.")
        return

    # Initialize new game
    game_state.init_new_game(chat_id)

    # Create registration button
    markup = types.InlineKeyboardMarkup()
    register_button = types.InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")
    markup.add(register_button)
    
    # Send registration message
    text = f"–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:{REGISTRATION_TIME}—Å–µ–∫\n–ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª"
    registration_msg = bot.send_message(chat_id, text, reply_markup=markup)
    game_state.registration_messages[chat_id] = registration_msg.message_id

@bot.message_handler(commands=['wait'])
def wait_command(message):
    """Handle /wait command to extend registration time"""
    chat_id = message.chat.id
    
    if game_state.extend_registration(chat_id):
        # Update registration message
        if chat_id in game_state.registration_messages:
            players_list = game_state.get_registered_players_text(chat_id)
            markup = types.InlineKeyboardMarkup()
            register_button = types.InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")
            markup.add(register_button)
            
            text = (f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∏–≥—Ä—É '–ö–ª—É–± –õ–∂–µ—Ü–æ–≤' –ø—Ä–æ–¥–ª–µ–Ω–∞!\n"
                   f"–£ –≤–∞—Å –µ—Å—Ç—å {REGISTRATION_TIME} —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
                   f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n{players_list}")
            
            try:
                bot.edit_message_text(
                    text,
                    chat_id,
                    game_state.registration_messages[chat_id],
                    reply_markup=markup
                )
            except Exception as e:
                print(f"Error updating message: {e}")
        
        bot.send_message(chat_id, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {REGISTRATION_TIME} —Å–µ–∫—É–Ω–¥.")
    else:
        bot.send_message(chat_id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['end_game'])
def end_game_command(message):
    """Handle /end_game command to force end a game"""
    chat_id = message.chat.id
    
    if chat_id in game_state.games and game_state.games[chat_id]['status'] != 'finished':
        game_state.games[chat_id]['status'] = 'finished'
        bot.send_message(chat_id, "–ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        game_state.save_state()
    else:
        bot.send_message(chat_id, "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

@bot.message_handler(commands=['status'])
def status_command(message):
    """Handle /status command to show game status"""
    chat_id = message.chat.id
    
    if chat_id in game_state.games:
        game_data = game_state.games[chat_id]
        
        if game_data['status'] == 'registration':
            remaining_time = int(game_state.waiting_registration.get(chat_id, 0) - time.time())
            players_list = game_state.get_registered_players_text(chat_id)
            status_message = (f"–°—Ç–∞—Ç—É—Å: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
                             f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time if remaining_time > 0 else 0} —Å–µ–∫—É–Ω–¥\n"
                             f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n{players_list}")
        elif game_data['status'] == 'playing':
            players_info = []
            for player_id, player_info in game_data['players'].items():
                player_status = " (—Ç–µ–∫—É—â–∏–π —Ö–æ–¥)" if player_id == game_data['current_player'] else ""
                bullets = game_data['roulette_bullets'].get(player_id, 0)
                bullets_info = f" [{bullets} –ø–∞—Ç—Ä.]" if bullets > 0 else ""
                players_info.append(f"‚Ä¢ {player_info['name']}{player_status}{bullets_info} - {len(player_info['cards'])} –∫–∞—Ä—Ç")
            
            players_list = "\n".join(players_info)
            
            status_message = (f"–°—Ç–∞—Ç—É—Å: –ò–≥—Ä–∞ –∏–¥–µ—Ç\n"
                             f"–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞: {CARD_NAMES[game_data['current_card']]}\n"
                             f"–ò–≥—Ä–æ–∫–∏:\n{players_list}")
        else:  # finished
            status_message = "–°—Ç–∞—Ç—É—Å: –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        bot.send_message(chat_id, status_message)
    else:
        bot.send_message(chat_id, "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

@bot.message_handler(commands=['cards'])
def cards_command(message):
    """Handle /cards command to show player's cards"""
    user_id = message.from_user.id
    
    chat_id, game_data = game_state.is_player_in_any_game(user_id)
    if chat_id and game_data and game_data['status'] == 'playing':
        player_cards = game_data['players'][user_id]['cards']
        card_names = [f"{CARD_NAMES[card]} ({card})" for card in player_cards]
        
        bot.send_message(user_id, f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(card_names)}\n"
          f"–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ä—Ç –¥–ª—è —Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è: A, K, Q, J")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ –∏–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")

# Callback handlers
@bot.callback_query_handler(func=lambda call: call.data == "register")
def register_button_callback(call):
    """Handle player registration button press"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    # Get username or fallback to first name
    if call.from_user.username:
        user_name = call.from_user.username
    else:
        user_name = call.from_user.first_name or "Player"
    
    success, message = game_state.register_player(chat_id, user_id, user_name)
    
    # Update registration message
    if success and chat_id in game_state.registration_messages:
        players_list = game_state.get_registered_players_text(chat_id)
        markup = types.InlineKeyboardMarkup()
        register_button = types.InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")
        markup.add(register_button)
        
        text = (f"‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:{REGISTRATION_TIME}—Å–µ–∫\n–ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª \n"
               f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n{players_list}")
        
        try:
            bot.edit_message_text(
                text,
                chat_id,
                game_state.registration_messages[chat_id],
                reply_markup=markup
            )
        except Exception as e:
            print(f"Error updating registration message: {e}")
        
        # Send private message to player
        try:
            bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∏–≥—Ä—É '–ö–ª—É–± –õ–∂–µ—Ü–æ–≤'")
        except Exception:
            # Player might not have started chat with bot
            bot.send_message(chat_id, f"@{user_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –Ω–∞—á–Ω–∏—Ç–µ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º.")
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("place_"))
def place_cards_callback(call):
    """Handle player choosing how many cards to place"""
    user_id = call.from_user.id
    count = int(call.data.split('_')[1])
    
    # Find the game where this player is current
    for chat_id, game_data in game_state.games.items():
        if game_data['current_player'] == user_id and game_data['status'] == 'playing':
            # Save count for future use
            game_data['temp_count'] = count
            game_data['temp_selected_cards'] = []
            
            # Get name of current card
            current_card_name = CARD_NAMES[game_data['current_card']]
            
            # Ask player to input cards as text
            text = (f"–í—ã —Ä–µ—à–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç—å {count} –∫–∞—Ä—Ç.\n"
                   f"–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: {current_card_name}\n"
                   f"–ù–∞–ø—Ä–∏–º–µ—Ä: 'A K Q' –∏–ª–∏ 'QJ' (–¥–ª—è –≤—ã–±–æ—Ä–∞ –î–∞–º—ã –∏ –î–∂–æ–∫–µ—Ä–∞)")
            
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id
            )
            
            # Register next step for text input
            bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_card_selection, user_id, chat_id)
            
            bot.answer_callback_query(call.id)
            return
    
    bot.answer_callback_query(call.id, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
@bot.callback_query_handler(func=lambda call: call.data == "check")
def check_callback(call):
    """Handle player checking the previous player's claim"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    # Check if game exists and is active
    if chat_id not in game_state.games or game_state.games[chat_id]['status'] != 'playing':
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return
        
    game_data = game_state.games[chat_id]
    
    # Check if it's this player's turn to check
    if game_data.get('next_player') != user_id:
        bot.answer_callback_query(call.id, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return
    
    # Check if there's a claim to check
    if not game_data['last_claim']['player_id']:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
        
    # Remove the inline keyboard
    try:
        bot.edit_message_reply_markup(
            chat_id,
            call.message.message_id,
            reply_markup=None
        )
    except Exception as e:
        print(f"Error removing keyboard: {e}")
    
    # Perform check
    bot.answer_callback_query(call.id)
    check_claim(chat_id, user_id)

@bot.callback_query_handler(func=lambda call: call.data == "pass")
def pass_callback(call):
    """Handle player passing their turn to check"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
    if chat_id not in game_state.games or game_state.games[chat_id]['status'] != 'playing':
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return
        
    game_data = game_state.games[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏/–ø—Ä–æ–ø—É—Å–∫–∞
    if game_data.get('next_player') != user_id:
        bot.answer_callback_query(call.id, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        bot.edit_message_reply_markup(
            chat_id,
            call.message.message_id,
            reply_markup=None
        )
    except Exception as e:
        print(f"Error removing keyboard: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    last_claim = game_data['last_claim']
    if last_claim['count'] > 0 and game_data['table_cards']:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
        laid_cards = game_data['table_cards'][-last_claim['count']:]
        laid_cards_str = [CARD_NAMES[card] for card in laid_cards]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–¥–∏–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏
        was_honest = all(c == last_claim['card'] or c == 'J' for c in laid_cards)
        honesty_result = "–æ–Ω –Ω–µ –≤—Ä–µ—Ç" if was_honest else "–æ–Ω –æ–±–º–∞–Ω—É–ª –≤–∞—Å"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        bot.send_message(chat_id, f"–ö–∏–Ω—É–ª: {laid_cards_str} - {honesty_result}!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    game_data['current_player'] = user_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
    player_name = game_data['players'][user_id]['name']
    bot.send_message(chat_id, f"@{player_name} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.")
    
    bot.answer_callback_query(call.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç —É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    if len(game_data['players'][user_id]['cards']) == 0:
        deal_cards_to_player(chat_id, user_id)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
    send_turn_message(chat_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    game_data['last_activity'] = time.time()
    game_state.save_state()

# Error handling wrapper
def error_handler(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            # Log the error
            error_text = f"Error in {func.__name__}: {e}\n{traceback.format_exc()}"
            print(error_text)
            
            # Try to notify chat if possible
            try:
                if args and hasattr(args[0], 'chat') and hasattr(args[0].chat, 'id'):
                    chat_id = args[0].chat.id
                    bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /new_game.")
            except Exception:
                pass  # If we can't notify, just continue
            
            return None
    return wrapper

# Apply error handling to message handlers
bot.message_handler = error_handler(bot.message_handler)

# Help command
@bot.message_handler(commands=['help'])
def help_command(message):
    """Show help information"""
    help_text = (
        "üÉè –ö–ª—É–± –õ–∂–µ—Ü–æ–≤ - –∏–≥—Ä–∞ –æ–± –æ–±–º–∞–Ω–µ –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/new_game - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/wait - –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã\n"
        "/cards - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã (–≤ –õ–°)\n"
        "/end_game - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n"
        "1. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 5 –∫–∞—Ä—Ç.\n"
        "2. –ù–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥—É –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª–µ–≤–∞—è –∫–∞—Ä—Ç–∞ (–¢—É–∑, –ö–æ—Ä–æ–ª—å –∏–ª–∏ –î–∞–º–∞).\n"
        "3. –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∫–ª–∞–¥—É—Ç –æ—Ç 1 –¥–æ 3 –∫–∞—Ä—Ç, —É—Ç–≤–µ—Ä–∂–¥–∞—è, —á—Ç–æ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–±—ä—è–≤–ª–µ–Ω–Ω–æ–π.\n"
        "4. –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥.\n"
        "5. –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n"
        "   - –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–ª–≥–∞–ª, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –ø—É–ª—é –≤ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ.\n"
        "   - –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≥–æ–≤–æ—Ä–∏–ª –ø—Ä–∞–≤–¥—É, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –ø–æ–ª—É—á–∞–µ—Ç –ø—É–ª—é.\n"
        "6. –î–∂–æ–∫–µ—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π.\n"
        "7. –ü–æ—Å–ª–µ 6 –ø—É–ª—å –∏–≥—Ä–æ–∫ –≤—ã–±—ã–≤–∞–µ—Ç.\n"
        "8. –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç."
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['rules'])
def rules_command(message):
    """Show detailed rules"""
    rules_text = (
        "üé≤ *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–ö–ª—É–± –õ–∂–µ—Ü–æ–≤'*\n\n"
        "*–°–æ—Å—Ç–∞–≤ –∫–æ–ª–æ–¥—ã:*\n"
        "‚Ä¢ 6 –¢—É–∑–æ–≤ (A)\n"
        "‚Ä¢ 6 –ö–æ—Ä–æ–ª–µ–π (K)\n"
        "‚Ä¢ 6 –î–∞–º (Q)\n"
        "‚Ä¢ 2 –î–∂–æ–∫–µ—Ä–∞ (J)\n\n"
        "*–¶–µ–ª—å –∏–≥—Ä—ã:* –û—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤—ã–∂–∏–≤—à–∏–º –∏–≥—Ä–æ–∫–æ–º.\n\n"
        "*–•–æ–¥ –∏–≥—Ä—ã:*\n"
        "1. –ö–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Ä–∞–∑–¥–∞–µ—Ç—Å—è –ø–æ 5 –∫–∞—Ä—Ç.\n"
        "2. –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –∏ —Ü–µ–ª–µ–≤–∞—è –∫–∞—Ä—Ç–∞ (–¢—É–∑, –ö–æ—Ä–æ–ª—å –∏–ª–∏ –î–∞–º–∞).\n"
        "3. –ù–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥—É –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–æ–ª –æ—Ç 1 –¥–æ 3 –∫–∞—Ä—Ç, –∑–∞—è–≤–ª—è—è, —á—Ç–æ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ä—Ç–µ.\n"
        "4. –°–ª–µ–¥—É—é—â–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç:\n"
        "   ‚Ä¢ *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å* –∑–∞—è–≤–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞\n"
        "   ‚Ä¢ *–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å* –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π —Ö–æ–¥\n\n"
        "*–ü—Ä–æ–≤–µ—Ä–∫–∞:*\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞—è–≤–ª–µ–Ω–Ω—ã–º (–î–∂–æ–∫–µ—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π), –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.\n"
        "‚Ä¢ –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—è–≤–∫–µ, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–∫, –ø–æ–ª–æ–∂–∏–≤—à–∏–π –∫–∞—Ä—Ç—ã.\n\n"
        "*–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞:*\n"
        "‚Ä¢ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –ø—É–ª—é –≤ –±–∞—Ä–∞–±–∞–Ω —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞.\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ —É –∏–≥—Ä–æ–∫–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è 6 –ø—É–ª—å, –æ–Ω –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã.\n\n"
        "*–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥:*\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Å –Ω–æ–≤–æ–π —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ä—Ç–æ–π.\n"
        "‚Ä¢ –ü–æ–±–µ–¥–∏–≤—à–∏–π –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º.\n\n"
        "*–ü–æ–±–µ–¥–∞:* –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º."
    )
    bot.send_message(message.chat.id, rules_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """Handle any other text messages"""
    # Check if this might be a card selection response
    if message.chat.type == 'private':
        user_id = message.from_user.id
        chat_id, game_data = game_state.is_player_in_any_game(user_id)
        
        if (chat_id and game_data and 
            game_data['status'] == 'playing' and 
            game_data['current_player'] == user_id and
            'temp_count' in game_data):
            # This might be a card selection, process it
            process_card_selection(message, user_id, chat_id)
            return
    
    # For group chats, don't respond to random messages
    if message.chat.type != 'private':
        return
        
    # For private messages not related to game, show help
    bot.send_message(message.chat.id, 
                   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n"
                   "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_game –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

def check_for_inactive_games():
    """Periodic task to clean up inactive games"""
    current_time = time.time()
    inactive_chats = []
    
    # Check for games in registration that passed their time
    for chat_id, registration_time in list(game_state.waiting_registration.items()):
        if current_time > registration_time:
            end_registration(chat_id, game_state)
    
    # Check for inactive games (no activity for 12 hours)
    for chat_id, game_data in game_state.games.items():
        if game_data['status'] == 'playing' and 'last_activity' in game_data:
            if current_time - game_data.get('last_activity', 0) > 12 * 3600:  # 12 hours
                inactive_chats.append(chat_id)
    
    # Clean up inactive games
    for chat_id in inactive_chats:
        try:
            bot.send_message(chat_id, "–ò–≥—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
            game_state.games[chat_id]['status'] = 'finished'
        except Exception as e:
            print(f"Error sending message to inactive chat {chat_id}: {e}")
    
    # Save state after cleanup
    if inactive_chats:
        game_state.save_state()

# Start the bot with polling
if __name__ == "__main__":
    print("Bot is starting...")
    
    # Set up a timer to check for inactive games every hour
    cleanup_thread = threading.Timer(3600, check_for_inactive_games)
    cleanup_thread.daemon = True  # So it doesn't block program exit
    cleanup_thread.start()
    
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        print(f"Bot polling error: {e}")
        traceback.print_exc()
    finally:
        # Save game state when exiting
        game_state.save_state()
        print("Bot stopped.")